
i2carduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a60  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002c0c  08002c0c  00003c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c4c  08002c4c  0000402c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c4c  08002c4c  0000402c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c4c  08002c4c  0000402c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c4c  08002c4c  00003c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c50  08002c50  00003c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08002c54  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000002c  08002c80  0000402c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002c80  000040a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091ed  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b1  00000000  00000000  0000d249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0000eb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000750  00000000  00000000  0000f4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279cd  00000000  00000000  0000fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000baad  00000000  00000000  000375bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2059  00000000  00000000  0004306a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001350c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002678  00000000  00000000  00135108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00137780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002bf4 	.word	0x08002bf4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000030 	.word	0x20000030
 80001e8:	08002bf4 	.word	0x08002bf4

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f2:	f000 f9f6 	bl	80005e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f6:	f000 f831 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fa:	f000 f8c1 	bl	8000380 <MX_GPIO_Init>
  MX_I2C2_Init();
 80001fe:	f000 f87f 	bl	8000300 <MX_I2C2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ret = HAL_I2C_Master_Transmit(&hi2c2,  (4 << 1),(uint8_t *)dataBuffer, 29, 100);
 8000202:	2364      	movs	r3, #100	@ 0x64
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	231d      	movs	r3, #29
 8000208:	4a10      	ldr	r2, [pc, #64]	@ (800024c <main+0x60>)
 800020a:	2108      	movs	r1, #8
 800020c:	4810      	ldr	r0, [pc, #64]	@ (8000250 <main+0x64>)
 800020e:	f000 fdc7 	bl	8000da0 <HAL_I2C_Master_Transmit>
 8000212:	4603      	mov	r3, r0
 8000214:	461a      	mov	r2, r3
 8000216:	4b0f      	ldr	r3, [pc, #60]	@ (8000254 <main+0x68>)
 8000218:	601a      	str	r2, [r3, #0]
  /* USER CODE END WHILE */
						if ( ret != HAL_OK ) {
 800021a:	4b0e      	ldr	r3, [pc, #56]	@ (8000254 <main+0x68>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d004      	beq.n	800022c <main+0x40>
						      HAL_GPIO_WritePin(GPIOB,  GPIO_PIN_7, 1);
 8000222:	2201      	movs	r2, #1
 8000224:	2180      	movs	r1, #128	@ 0x80
 8000226:	480c      	ldr	r0, [pc, #48]	@ (8000258 <main+0x6c>)
 8000228:	f000 fcec 	bl	8000c04 <HAL_GPIO_WritePin>
								 }


						 if ( ret == HAL_OK ) {
 800022c:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <main+0x68>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d106      	bne.n	8000242 <main+0x56>
							 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000234:	2180      	movs	r1, #128	@ 0x80
 8000236:	4808      	ldr	r0, [pc, #32]	@ (8000258 <main+0x6c>)
 8000238:	f000 fcfc 	bl	8000c34 <HAL_GPIO_TogglePin>

						HAL_Delay(200);
 800023c:	20c8      	movs	r0, #200	@ 0xc8
 800023e:	f000 fa45 	bl	80006cc <HAL_Delay>
						 }
		 		HAL_Delay(1000);
 8000242:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000246:	f000 fa41 	bl	80006cc <HAL_Delay>
	  ret = HAL_I2C_Master_Transmit(&hi2c2,  (4 << 1),(uint8_t *)dataBuffer, 29, 100);
 800024a:	e7da      	b.n	8000202 <main+0x16>
 800024c:	20000000 	.word	0x20000000
 8000250:	20000048 	.word	0x20000048
 8000254:	2000009c 	.word	0x2000009c
 8000258:	48000400 	.word	0x48000400

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b096      	sub	sp, #88	@ 0x58
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0314 	add.w	r3, r7, #20
 8000266:	2244      	movs	r2, #68	@ 0x44
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f002 fc96 	bl	8002b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	463b      	mov	r3, r7
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800027e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000282:	f001 f965 	bl	8001550 <HAL_PWREx_ControlVoltageScaling>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800028c:	f000 f8b6 	bl	80003fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000290:	2302      	movs	r3, #2
 8000292:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000298:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	2340      	movs	r3, #64	@ 0x40
 800029c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029e:	2302      	movs	r3, #2
 80002a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a2:	2302      	movs	r3, #2
 80002a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80002aa:	230a      	movs	r3, #10
 80002ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ae:	2302      	movs	r3, #2
 80002b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002b2:	2302      	movs	r3, #2
 80002b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002b6:	2302      	movs	r3, #2
 80002b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 f99c 	bl	80015fc <HAL_RCC_OscConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002ca:	f000 f897 	bl	80003fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	230f      	movs	r3, #15
 80002d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d2:	2303      	movs	r3, #3
 80002d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002e4:	463b      	mov	r3, r7
 80002e6:	2104      	movs	r1, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 fda1 	bl	8001e30 <HAL_RCC_ClockConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002f4:	f000 f882 	bl	80003fc <Error_Handler>
  }
}
 80002f8:	bf00      	nop
 80002fa:	3758      	adds	r7, #88	@ 0x58
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000304:	4b1b      	ldr	r3, [pc, #108]	@ (8000374 <MX_I2C2_Init+0x74>)
 8000306:	4a1c      	ldr	r2, [pc, #112]	@ (8000378 <MX_I2C2_Init+0x78>)
 8000308:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00D09BE3;
 800030a:	4b1a      	ldr	r3, [pc, #104]	@ (8000374 <MX_I2C2_Init+0x74>)
 800030c:	4a1b      	ldr	r2, [pc, #108]	@ (800037c <MX_I2C2_Init+0x7c>)
 800030e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000310:	4b18      	ldr	r3, [pc, #96]	@ (8000374 <MX_I2C2_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000316:	4b17      	ldr	r3, [pc, #92]	@ (8000374 <MX_I2C2_Init+0x74>)
 8000318:	2201      	movs	r2, #1
 800031a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800031c:	4b15      	ldr	r3, [pc, #84]	@ (8000374 <MX_I2C2_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000322:	4b14      	ldr	r3, [pc, #80]	@ (8000374 <MX_I2C2_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000328:	4b12      	ldr	r3, [pc, #72]	@ (8000374 <MX_I2C2_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800032e:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <MX_I2C2_Init+0x74>)
 8000330:	2200      	movs	r2, #0
 8000332:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000334:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <MX_I2C2_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800033a:	480e      	ldr	r0, [pc, #56]	@ (8000374 <MX_I2C2_Init+0x74>)
 800033c:	f000 fc94 	bl	8000c68 <HAL_I2C_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000346:	f000 f859 	bl	80003fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800034a:	2100      	movs	r1, #0
 800034c:	4809      	ldr	r0, [pc, #36]	@ (8000374 <MX_I2C2_Init+0x74>)
 800034e:	f001 f859 	bl	8001404 <HAL_I2CEx_ConfigAnalogFilter>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000358:	f000 f850 	bl	80003fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800035c:	2100      	movs	r1, #0
 800035e:	4805      	ldr	r0, [pc, #20]	@ (8000374 <MX_I2C2_Init+0x74>)
 8000360:	f001 f89b 	bl	800149a <HAL_I2CEx_ConfigDigitalFilter>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800036a:	f000 f847 	bl	80003fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000048 	.word	0x20000048
 8000378:	40005800 	.word	0x40005800
 800037c:	00d09be3 	.word	0x00d09be3

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000396:	4b17      	ldr	r3, [pc, #92]	@ (80003f4 <MX_GPIO_Init+0x74>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039a:	4a16      	ldr	r2, [pc, #88]	@ (80003f4 <MX_GPIO_Init+0x74>)
 800039c:	f043 0320 	orr.w	r3, r3, #32
 80003a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003a2:	4b14      	ldr	r3, [pc, #80]	@ (80003f4 <MX_GPIO_Init+0x74>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a6:	f003 0320 	and.w	r3, r3, #32
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <MX_GPIO_Init+0x74>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b2:	4a10      	ldr	r2, [pc, #64]	@ (80003f4 <MX_GPIO_Init+0x74>)
 80003b4:	f043 0302 	orr.w	r3, r3, #2
 80003b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ba:	4b0e      	ldr	r3, [pc, #56]	@ (80003f4 <MX_GPIO_Init+0x74>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003be:	f003 0302 	and.w	r3, r3, #2
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2180      	movs	r1, #128	@ 0x80
 80003ca:	480b      	ldr	r0, [pc, #44]	@ (80003f8 <MX_GPIO_Init+0x78>)
 80003cc:	f000 fc1a 	bl	8000c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80003d0:	2380      	movs	r3, #128	@ 0x80
 80003d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e0:	f107 030c 	add.w	r3, r7, #12
 80003e4:	4619      	mov	r1, r3
 80003e6:	4804      	ldr	r0, [pc, #16]	@ (80003f8 <MX_GPIO_Init+0x78>)
 80003e8:	f000 fa7a 	bl	80008e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ec:	bf00      	nop
 80003ee:	3720      	adds	r7, #32
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40021000 	.word	0x40021000
 80003f8:	48000400 	.word	0x48000400

080003fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000400:	b672      	cpsid	i
}
 8000402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000404:	bf00      	nop
 8000406:	e7fd      	b.n	8000404 <Error_Handler+0x8>

08000408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <HAL_MspInit+0x44>)
 8000410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000412:	4a0e      	ldr	r2, [pc, #56]	@ (800044c <HAL_MspInit+0x44>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6613      	str	r3, [r2, #96]	@ 0x60
 800041a:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <HAL_MspInit+0x44>)
 800041c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000426:	4b09      	ldr	r3, [pc, #36]	@ (800044c <HAL_MspInit+0x44>)
 8000428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800042a:	4a08      	ldr	r2, [pc, #32]	@ (800044c <HAL_MspInit+0x44>)
 800042c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000430:	6593      	str	r3, [r2, #88]	@ 0x58
 8000432:	4b06      	ldr	r3, [pc, #24]	@ (800044c <HAL_MspInit+0x44>)
 8000434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000

08000450 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b0ac      	sub	sp, #176	@ 0xb0
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000458:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	228c      	movs	r2, #140	@ 0x8c
 800046e:	2100      	movs	r1, #0
 8000470:	4618      	mov	r0, r3
 8000472:	f002 fb93 	bl	8002b9c <memset>
  if(hi2c->Instance==I2C2)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a21      	ldr	r2, [pc, #132]	@ (8000500 <HAL_I2C_MspInit+0xb0>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d13a      	bne.n	80004f6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000480:	2380      	movs	r3, #128	@ 0x80
 8000482:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000484:	2300      	movs	r3, #0
 8000486:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4618      	mov	r0, r3
 800048e:	f001 febb 	bl	8002208 <HAL_RCCEx_PeriphCLKConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000498:	f7ff ffb0 	bl	80003fc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800049c:	4b19      	ldr	r3, [pc, #100]	@ (8000504 <HAL_I2C_MspInit+0xb4>)
 800049e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a0:	4a18      	ldr	r2, [pc, #96]	@ (8000504 <HAL_I2C_MspInit+0xb4>)
 80004a2:	f043 0320 	orr.w	r3, r3, #32
 80004a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004a8:	4b16      	ldr	r3, [pc, #88]	@ (8000504 <HAL_I2C_MspInit+0xb4>)
 80004aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ac:	f003 0320 	and.w	r3, r3, #32
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004b4:	2303      	movs	r3, #3
 80004b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004ba:	2312      	movs	r3, #18
 80004bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004c6:	2303      	movs	r3, #3
 80004c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80004cc:	2304      	movs	r3, #4
 80004ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80004d6:	4619      	mov	r1, r3
 80004d8:	480b      	ldr	r0, [pc, #44]	@ (8000508 <HAL_I2C_MspInit+0xb8>)
 80004da:	f000 fa01 	bl	80008e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80004de:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <HAL_I2C_MspInit+0xb4>)
 80004e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004e2:	4a08      	ldr	r2, [pc, #32]	@ (8000504 <HAL_I2C_MspInit+0xb4>)
 80004e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80004ea:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <HAL_I2C_MspInit+0xb4>)
 80004ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80004f6:	bf00      	nop
 80004f8:	37b0      	adds	r7, #176	@ 0xb0
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40005800 	.word	0x40005800
 8000504:	40021000 	.word	0x40021000
 8000508:	48001400 	.word	0x48001400

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <NMI_Handler+0x4>

08000514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <HardFault_Handler+0x4>

0800051c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <MemManage_Handler+0x4>

08000524 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <BusFault_Handler+0x4>

0800052c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <UsageFault_Handler+0x4>

08000534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000562:	f000 f893 	bl	800068c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <SystemInit+0x20>)
 8000572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000576:	4a05      	ldr	r2, [pc, #20]	@ (800058c <SystemInit+0x20>)
 8000578:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800057c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000590:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000594:	f7ff ffea 	bl	800056c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000598:	480c      	ldr	r0, [pc, #48]	@ (80005cc <LoopForever+0x6>)
  ldr r1, =_edata
 800059a:	490d      	ldr	r1, [pc, #52]	@ (80005d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800059c:	4a0d      	ldr	r2, [pc, #52]	@ (80005d4 <LoopForever+0xe>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0a      	ldr	r2, [pc, #40]	@ (80005d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b0:	4c0a      	ldr	r4, [pc, #40]	@ (80005dc <LoopForever+0x16>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005be:	f002 faf5 	bl	8002bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005c2:	f7ff fe13 	bl	80001ec <main>

080005c6 <LoopForever>:

LoopForever:
    b LoopForever
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80005d4:	08002c54 	.word	0x08002c54
  ldr r2, =_sbss
 80005d8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80005dc:	200000a4 	.word	0x200000a4

080005e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC1_2_IRQHandler>

080005e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005e8:	2300      	movs	r3, #0
 80005ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ec:	2003      	movs	r0, #3
 80005ee:	f000 f943 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 f80e 	bl	8000614 <HAL_InitTick>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	e001      	b.n	8000608 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000604:	f7ff ff00 	bl	8000408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000608:	79fb      	ldrb	r3, [r7, #7]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000620:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <HAL_InitTick+0x6c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d023      	beq.n	8000670 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000628:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <HAL_InitTick+0x70>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <HAL_InitTick+0x6c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000636:	fbb3 f3f1 	udiv	r3, r3, r1
 800063a:	fbb2 f3f3 	udiv	r3, r2, r3
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f941 	bl	80008c6 <HAL_SYSTICK_Config>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d10f      	bne.n	800066a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b0f      	cmp	r3, #15
 800064e:	d809      	bhi.n	8000664 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000650:	2200      	movs	r2, #0
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	f04f 30ff 	mov.w	r0, #4294967295
 8000658:	f000 f919 	bl	800088e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800065c:	4a0a      	ldr	r2, [pc, #40]	@ (8000688 <HAL_InitTick+0x74>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6013      	str	r3, [r2, #0]
 8000662:	e007      	b.n	8000674 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000664:	2301      	movs	r3, #1
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	e004      	b.n	8000674 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	73fb      	strb	r3, [r7, #15]
 800066e:	e001      	b.n	8000674 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000670:	2301      	movs	r3, #1
 8000672:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000674:	7bfb      	ldrb	r3, [r7, #15]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000028 	.word	0x20000028
 8000684:	20000020 	.word	0x20000020
 8000688:	20000024 	.word	0x20000024

0800068c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <HAL_IncTick+0x20>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <HAL_IncTick+0x24>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4413      	add	r3, r2
 800069c:	4a04      	ldr	r2, [pc, #16]	@ (80006b0 <HAL_IncTick+0x24>)
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000028 	.word	0x20000028
 80006b0:	200000a0 	.word	0x200000a0

080006b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return uwTick;
 80006b8:	4b03      	ldr	r3, [pc, #12]	@ (80006c8 <HAL_GetTick+0x14>)
 80006ba:	681b      	ldr	r3, [r3, #0]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	200000a0 	.word	0x200000a0

080006cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d4:	f7ff ffee 	bl	80006b4 <HAL_GetTick>
 80006d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e4:	d005      	beq.n	80006f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <HAL_Delay+0x44>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006f2:	bf00      	nop
 80006f4:	f7ff ffde 	bl	80006b4 <HAL_GetTick>
 80006f8:	4602      	mov	r2, r0
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	429a      	cmp	r2, r3
 8000702:	d8f7      	bhi.n	80006f4 <HAL_Delay+0x28>
  {
  }
}
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000028 	.word	0x20000028

08000714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800073c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000746:	4a04      	ldr	r2, [pc, #16]	@ (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	60d3      	str	r3, [r2, #12]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000760:	4b04      	ldr	r3, [pc, #16]	@ (8000774 <__NVIC_GetPriorityGrouping+0x18>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	f003 0307 	and.w	r3, r3, #7
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	db0a      	blt.n	80007a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	490c      	ldr	r1, [pc, #48]	@ (80007c4 <__NVIC_SetPriority+0x4c>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a0:	e00a      	b.n	80007b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4908      	ldr	r1, [pc, #32]	@ (80007c8 <__NVIC_SetPriority+0x50>)
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	3b04      	subs	r3, #4
 80007b0:	0112      	lsls	r2, r2, #4
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	440b      	add	r3, r1
 80007b6:	761a      	strb	r2, [r3, #24]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000e100 	.word	0xe000e100
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b089      	sub	sp, #36	@ 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f1c3 0307 	rsb	r3, r3, #7
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	bf28      	it	cs
 80007ea:	2304      	movcs	r3, #4
 80007ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3304      	adds	r3, #4
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	d902      	bls.n	80007fc <NVIC_EncodePriority+0x30>
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3b03      	subs	r3, #3
 80007fa:	e000      	b.n	80007fe <NVIC_EncodePriority+0x32>
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	f04f 32ff 	mov.w	r2, #4294967295
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43da      	mvns	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	401a      	ands	r2, r3
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000814:	f04f 31ff 	mov.w	r1, #4294967295
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43d9      	mvns	r1, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	4313      	orrs	r3, r2
         );
}
 8000826:	4618      	mov	r0, r3
 8000828:	3724      	adds	r7, #36	@ 0x24
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000844:	d301      	bcc.n	800084a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000846:	2301      	movs	r3, #1
 8000848:	e00f      	b.n	800086a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084a:	4a0a      	ldr	r2, [pc, #40]	@ (8000874 <SysTick_Config+0x40>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000852:	210f      	movs	r1, #15
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	f7ff ff8e 	bl	8000778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <SysTick_Config+0x40>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000862:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <SysTick_Config+0x40>)
 8000864:	2207      	movs	r2, #7
 8000866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	e000e010 	.word	0xe000e010

08000878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff47 	bl	8000714 <__NVIC_SetPriorityGrouping>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008a0:	f7ff ff5c 	bl	800075c <__NVIC_GetPriorityGrouping>
 80008a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	f7ff ff8e 	bl	80007cc <NVIC_EncodePriority>
 80008b0:	4602      	mov	r2, r0
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff5d 	bl	8000778 <__NVIC_SetPriority>
}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ffb0 	bl	8000834 <SysTick_Config>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ee:	e166      	b.n	8000bbe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	2101      	movs	r1, #1
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	4013      	ands	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	2b00      	cmp	r3, #0
 8000904:	f000 8158 	beq.w	8000bb8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f003 0303 	and.w	r3, r3, #3
 8000910:	2b01      	cmp	r3, #1
 8000912:	d005      	beq.n	8000920 <HAL_GPIO_Init+0x40>
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f003 0303 	and.w	r3, r3, #3
 800091c:	2b02      	cmp	r3, #2
 800091e:	d130      	bne.n	8000982 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	2203      	movs	r2, #3
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4013      	ands	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68da      	ldr	r2, [r3, #12]
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4313      	orrs	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000956:	2201      	movs	r2, #1
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4013      	ands	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	091b      	lsrs	r3, r3, #4
 800096c:	f003 0201 	and.w	r2, r3, #1
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4313      	orrs	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f003 0303 	and.w	r3, r3, #3
 800098a:	2b03      	cmp	r3, #3
 800098c:	d017      	beq.n	80009be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	2203      	movs	r2, #3
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	689a      	ldr	r2, [r3, #8]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d123      	bne.n	8000a12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	08da      	lsrs	r2, r3, #3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3208      	adds	r2, #8
 80009d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	220f      	movs	r2, #15
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	691a      	ldr	r2, [r3, #16]
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	f003 0307 	and.w	r3, r3, #7
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	08da      	lsrs	r2, r3, #3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3208      	adds	r2, #8
 8000a0c:	6939      	ldr	r1, [r7, #16]
 8000a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f003 0203 	and.w	r2, r3, #3
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f000 80b2 	beq.w	8000bb8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a54:	4b61      	ldr	r3, [pc, #388]	@ (8000bdc <HAL_GPIO_Init+0x2fc>)
 8000a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a58:	4a60      	ldr	r2, [pc, #384]	@ (8000bdc <HAL_GPIO_Init+0x2fc>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a60:	4b5e      	ldr	r3, [pc, #376]	@ (8000bdc <HAL_GPIO_Init+0x2fc>)
 8000a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a6c:	4a5c      	ldr	r2, [pc, #368]	@ (8000be0 <HAL_GPIO_Init+0x300>)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	089b      	lsrs	r3, r3, #2
 8000a72:	3302      	adds	r3, #2
 8000a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f003 0303 	and.w	r3, r3, #3
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	220f      	movs	r2, #15
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a96:	d02b      	beq.n	8000af0 <HAL_GPIO_Init+0x210>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a52      	ldr	r2, [pc, #328]	@ (8000be4 <HAL_GPIO_Init+0x304>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d025      	beq.n	8000aec <HAL_GPIO_Init+0x20c>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a51      	ldr	r2, [pc, #324]	@ (8000be8 <HAL_GPIO_Init+0x308>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d01f      	beq.n	8000ae8 <HAL_GPIO_Init+0x208>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a50      	ldr	r2, [pc, #320]	@ (8000bec <HAL_GPIO_Init+0x30c>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d019      	beq.n	8000ae4 <HAL_GPIO_Init+0x204>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a4f      	ldr	r2, [pc, #316]	@ (8000bf0 <HAL_GPIO_Init+0x310>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d013      	beq.n	8000ae0 <HAL_GPIO_Init+0x200>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a4e      	ldr	r2, [pc, #312]	@ (8000bf4 <HAL_GPIO_Init+0x314>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d00d      	beq.n	8000adc <HAL_GPIO_Init+0x1fc>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a4d      	ldr	r2, [pc, #308]	@ (8000bf8 <HAL_GPIO_Init+0x318>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d007      	beq.n	8000ad8 <HAL_GPIO_Init+0x1f8>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a4c      	ldr	r2, [pc, #304]	@ (8000bfc <HAL_GPIO_Init+0x31c>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d101      	bne.n	8000ad4 <HAL_GPIO_Init+0x1f4>
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	e00e      	b.n	8000af2 <HAL_GPIO_Init+0x212>
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	e00c      	b.n	8000af2 <HAL_GPIO_Init+0x212>
 8000ad8:	2306      	movs	r3, #6
 8000ada:	e00a      	b.n	8000af2 <HAL_GPIO_Init+0x212>
 8000adc:	2305      	movs	r3, #5
 8000ade:	e008      	b.n	8000af2 <HAL_GPIO_Init+0x212>
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	e006      	b.n	8000af2 <HAL_GPIO_Init+0x212>
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e004      	b.n	8000af2 <HAL_GPIO_Init+0x212>
 8000ae8:	2302      	movs	r3, #2
 8000aea:	e002      	b.n	8000af2 <HAL_GPIO_Init+0x212>
 8000aec:	2301      	movs	r3, #1
 8000aee:	e000      	b.n	8000af2 <HAL_GPIO_Init+0x212>
 8000af0:	2300      	movs	r3, #0
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	f002 0203 	and.w	r2, r2, #3
 8000af8:	0092      	lsls	r2, r2, #2
 8000afa:	4093      	lsls	r3, r2
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b02:	4937      	ldr	r1, [pc, #220]	@ (8000be0 <HAL_GPIO_Init+0x300>)
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	089b      	lsrs	r3, r3, #2
 8000b08:	3302      	adds	r3, #2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b10:	4b3b      	ldr	r3, [pc, #236]	@ (8000c00 <HAL_GPIO_Init+0x320>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b34:	4a32      	ldr	r2, [pc, #200]	@ (8000c00 <HAL_GPIO_Init+0x320>)
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b3a:	4b31      	ldr	r3, [pc, #196]	@ (8000c00 <HAL_GPIO_Init+0x320>)
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b5e:	4a28      	ldr	r2, [pc, #160]	@ (8000c00 <HAL_GPIO_Init+0x320>)
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b64:	4b26      	ldr	r3, [pc, #152]	@ (8000c00 <HAL_GPIO_Init+0x320>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b88:	4a1d      	ldr	r2, [pc, #116]	@ (8000c00 <HAL_GPIO_Init+0x320>)
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <HAL_GPIO_Init+0x320>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bb2:	4a13      	ldr	r2, [pc, #76]	@ (8000c00 <HAL_GPIO_Init+0x320>)
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f47f ae91 	bne.w	80008f0 <HAL_GPIO_Init+0x10>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	371c      	adds	r7, #28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010000 	.word	0x40010000
 8000be4:	48000400 	.word	0x48000400
 8000be8:	48000800 	.word	0x48000800
 8000bec:	48000c00 	.word	0x48000c00
 8000bf0:	48001000 	.word	0x48001000
 8000bf4:	48001400 	.word	0x48001400
 8000bf8:	48001800 	.word	0x48001800
 8000bfc:	48001c00 	.word	0x48001c00
 8000c00:	40010400 	.word	0x40010400

08000c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	807b      	strh	r3, [r7, #2]
 8000c10:	4613      	mov	r3, r2
 8000c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c14:	787b      	ldrb	r3, [r7, #1]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c1a:	887a      	ldrh	r2, [r7, #2]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c20:	e002      	b.n	8000c28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c22:	887a      	ldrh	r2, [r7, #2]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c46:	887a      	ldrh	r2, [r7, #2]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	041a      	lsls	r2, r3, #16
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	43d9      	mvns	r1, r3
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	400b      	ands	r3, r1
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	619a      	str	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e08d      	b.n	8000d96 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d106      	bne.n	8000c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fbde 	bl	8000450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2224      	movs	r2, #36	@ 0x24
 8000c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f022 0201 	bic.w	r2, r2, #1
 8000caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000cb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000cc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d107      	bne.n	8000ce2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	e006      	b.n	8000cf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000cee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d108      	bne.n	8000d0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	e007      	b.n	8000d1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000d18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691a      	ldr	r2, [r3, #16]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	430a      	orrs	r2, r1
 8000d56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69d9      	ldr	r1, [r3, #28]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a1a      	ldr	r2, [r3, #32]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	430a      	orrs	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0201 	orr.w	r2, r2, #1
 8000d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2220      	movs	r2, #32
 8000d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	461a      	mov	r2, r3
 8000dac:	460b      	mov	r3, r1
 8000dae:	817b      	strh	r3, [r7, #10]
 8000db0:	4613      	mov	r3, r2
 8000db2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b20      	cmp	r3, #32
 8000dbe:	f040 80fd 	bne.w	8000fbc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d101      	bne.n	8000dd0 <HAL_I2C_Master_Transmit+0x30>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e0f6      	b.n	8000fbe <HAL_I2C_Master_Transmit+0x21e>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000dd8:	f7ff fc6c 	bl	80006b4 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2319      	movs	r3, #25
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f000 f914 	bl	8001018 <I2C_WaitOnFlagUntilTimeout>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e0e1      	b.n	8000fbe <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2221      	movs	r2, #33	@ 0x21
 8000dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2210      	movs	r2, #16
 8000e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	893a      	ldrh	r2, [r7, #8]
 8000e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	2bff      	cmp	r3, #255	@ 0xff
 8000e2a:	d906      	bls.n	8000e3a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	22ff      	movs	r2, #255	@ 0xff
 8000e30:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8000e32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	e007      	b.n	8000e4a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000e44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e48:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d024      	beq.n	8000e9c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	8979      	ldrh	r1, [r7, #10]
 8000e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc8 <HAL_I2C_Master_Transmit+0x228>)
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	68f8      	ldr	r0, [r7, #12]
 8000e96:	f000 fa83 	bl	80013a0 <I2C_TransferConfig>
 8000e9a:	e066      	b.n	8000f6a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	8979      	ldrh	r1, [r7, #10]
 8000ea4:	4b48      	ldr	r3, [pc, #288]	@ (8000fc8 <HAL_I2C_Master_Transmit+0x228>)
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f000 fa78 	bl	80013a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000eb0:	e05b      	b.n	8000f6a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	6a39      	ldr	r1, [r7, #32]
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f000 f907 	bl	80010ca <I2C_WaitOnTXISFlagUntilTimeout>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e07b      	b.n	8000fbe <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d034      	beq.n	8000f6a <HAL_I2C_Master_Transmit+0x1ca>
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d130      	bne.n	8000f6a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2180      	movs	r1, #128	@ 0x80
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f000 f880 	bl	8001018 <I2C_WaitOnFlagUntilTimeout>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e04d      	b.n	8000fbe <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	2bff      	cmp	r3, #255	@ 0xff
 8000f2a:	d90e      	bls.n	8000f4a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	22ff      	movs	r2, #255	@ 0xff
 8000f30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	8979      	ldrh	r1, [r7, #10]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f000 fa2c 	bl	80013a0 <I2C_TransferConfig>
 8000f48:	e00f      	b.n	8000f6a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	8979      	ldrh	r1, [r7, #10]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f000 fa1b 	bl	80013a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d19e      	bne.n	8000eb2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	6a39      	ldr	r1, [r7, #32]
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f000 f8ed 	bl	8001158 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e01a      	b.n	8000fbe <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6859      	ldr	r1, [r3, #4]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <HAL_I2C_Master_Transmit+0x22c>)
 8000f9c:	400b      	ands	r3, r1
 8000f9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e000      	b.n	8000fbe <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8000fbc:	2302      	movs	r3, #2
  }
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	80002000 	.word	0x80002000
 8000fcc:	fe00e800 	.word	0xfe00e800

08000fd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d103      	bne.n	8000fee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2200      	movs	r2, #0
 8000fec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d007      	beq.n	800100c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	699a      	ldr	r2, [r3, #24]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	619a      	str	r2, [r3, #24]
  }
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	4613      	mov	r3, r2
 8001026:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001028:	e03b      	b.n	80010a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	6839      	ldr	r1, [r7, #0]
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f000 f8d6 	bl	80011e0 <I2C_IsErrorOccurred>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e041      	b.n	80010c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d02d      	beq.n	80010a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001046:	f7ff fb35 	bl	80006b4 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d302      	bcc.n	800105c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d122      	bne.n	80010a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	699a      	ldr	r2, [r3, #24]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	4013      	ands	r3, r2
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	429a      	cmp	r2, r3
 800106a:	bf0c      	ite	eq
 800106c:	2301      	moveq	r3, #1
 800106e:	2300      	movne	r3, #0
 8001070:	b2db      	uxtb	r3, r3
 8001072:	461a      	mov	r2, r3
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	429a      	cmp	r2, r3
 8001078:	d113      	bne.n	80010a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	f043 0220 	orr.w	r2, r3, #32
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2220      	movs	r2, #32
 800108a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	699a      	ldr	r2, [r3, #24]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4013      	ands	r3, r2
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	bf0c      	ite	eq
 80010b2:	2301      	moveq	r3, #1
 80010b4:	2300      	movne	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	461a      	mov	r2, r3
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d0b4      	beq.n	800102a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80010d6:	e033      	b.n	8001140 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 f87f 	bl	80011e0 <I2C_IsErrorOccurred>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e031      	b.n	8001150 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f2:	d025      	beq.n	8001140 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010f4:	f7ff fade 	bl	80006b4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	429a      	cmp	r2, r3
 8001102:	d302      	bcc.n	800110a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d11a      	bne.n	8001140 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b02      	cmp	r3, #2
 8001116:	d013      	beq.n	8001140 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111c:	f043 0220 	orr.w	r2, r3, #32
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2220      	movs	r2, #32
 8001128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e007      	b.n	8001150 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b02      	cmp	r3, #2
 800114c:	d1c4      	bne.n	80010d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001164:	e02f      	b.n	80011c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f000 f838 	bl	80011e0 <I2C_IsErrorOccurred>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e02d      	b.n	80011d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800117a:	f7ff fa9b 	bl	80006b4 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	429a      	cmp	r2, r3
 8001188:	d302      	bcc.n	8001190 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d11a      	bne.n	80011c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	2b20      	cmp	r3, #32
 800119c:	d013      	beq.n	80011c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	f043 0220 	orr.w	r2, r3, #32
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2220      	movs	r2, #32
 80011ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e007      	b.n	80011d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0320 	and.w	r3, r3, #32
 80011d0:	2b20      	cmp	r3, #32
 80011d2:	d1c8      	bne.n	8001166 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	2b00      	cmp	r3, #0
 800120a:	d068      	beq.n	80012de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2210      	movs	r2, #16
 8001212:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001214:	e049      	b.n	80012aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d045      	beq.n	80012aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800121e:	f7ff fa49 	bl	80006b4 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	429a      	cmp	r2, r3
 800122c:	d302      	bcc.n	8001234 <I2C_IsErrorOccurred+0x54>
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d13a      	bne.n	80012aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001246:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001256:	d121      	bne.n	800129c <I2C_IsErrorOccurred+0xbc>
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800125e:	d01d      	beq.n	800129c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001260:	7cfb      	ldrb	r3, [r7, #19]
 8001262:	2b20      	cmp	r3, #32
 8001264:	d01a      	beq.n	800129c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001274:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001276:	f7ff fa1d 	bl	80006b4 <HAL_GetTick>
 800127a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800127c:	e00e      	b.n	800129c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800127e:	f7ff fa19 	bl	80006b4 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b19      	cmp	r3, #25
 800128a:	d907      	bls.n	800129c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	f043 0320 	orr.w	r3, r3, #32
 8001292:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800129a:	e006      	b.n	80012aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f003 0320 	and.w	r3, r3, #32
 80012a6:	2b20      	cmp	r3, #32
 80012a8:	d1e9      	bne.n	800127e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0320 	and.w	r3, r3, #32
 80012b4:	2b20      	cmp	r3, #32
 80012b6:	d003      	beq.n	80012c0 <I2C_IsErrorOccurred+0xe0>
 80012b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0aa      	beq.n	8001216 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80012c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d103      	bne.n	80012d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2220      	movs	r2, #32
 80012ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00b      	beq.n	8001308 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001300:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00b      	beq.n	800132a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001322:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00b      	beq.n	800134c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001344:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800134c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001350:	2b00      	cmp	r3, #0
 8001352:	d01c      	beq.n	800138e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f7ff fe3b 	bl	8000fd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6859      	ldr	r1, [r3, #4]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <I2C_IsErrorOccurred+0x1bc>)
 8001366:	400b      	ands	r3, r1
 8001368:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	431a      	orrs	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2220      	movs	r2, #32
 800137a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800138e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001392:	4618      	mov	r0, r3
 8001394:	3728      	adds	r7, #40	@ 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	fe00e800 	.word	0xfe00e800

080013a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	817b      	strh	r3, [r7, #10]
 80013ae:	4613      	mov	r3, r2
 80013b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80013b2:	897b      	ldrh	r3, [r7, #10]
 80013b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80013b8:	7a7b      	ldrb	r3, [r7, #9]
 80013ba:	041b      	lsls	r3, r3, #16
 80013bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80013c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	0d5b      	lsrs	r3, r3, #21
 80013da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <I2C_TransferConfig+0x60>)
 80013e0:	430b      	orrs	r3, r1
 80013e2:	43db      	mvns	r3, r3
 80013e4:	ea02 0103 	and.w	r1, r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80013f2:	bf00      	nop
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	03ff63ff 	.word	0x03ff63ff

08001404 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b20      	cmp	r3, #32
 8001418:	d138      	bne.n	800148c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001424:	2302      	movs	r3, #2
 8001426:	e032      	b.n	800148e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2224      	movs	r2, #36	@ 0x24
 8001434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001456:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6819      	ldr	r1, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0201 	orr.w	r2, r2, #1
 8001476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2220      	movs	r2, #32
 800147c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	e000      	b.n	800148e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800148c:	2302      	movs	r3, #2
  }
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800149a:	b480      	push	{r7}
 800149c:	b085      	sub	sp, #20
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b20      	cmp	r3, #32
 80014ae:	d139      	bne.n	8001524 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d101      	bne.n	80014be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e033      	b.n	8001526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2224      	movs	r2, #36	@ 0x24
 80014ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2220      	movs	r2, #32
 8001514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	e000      	b.n	8001526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001524:	2302      	movs	r3, #2
  }
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001538:	4b04      	ldr	r3, [pc, #16]	@ (800154c <HAL_PWREx_GetVoltageRange+0x18>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40007000 	.word	0x40007000

08001550 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800155e:	d130      	bne.n	80015c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001560:	4b23      	ldr	r3, [pc, #140]	@ (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800156c:	d038      	beq.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800156e:	4b20      	ldr	r3, [pc, #128]	@ (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001576:	4a1e      	ldr	r2, [pc, #120]	@ (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001578:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800157c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800157e:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2232      	movs	r2, #50	@ 0x32
 8001584:	fb02 f303 	mul.w	r3, r2, r3
 8001588:	4a1b      	ldr	r2, [pc, #108]	@ (80015f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	3301      	adds	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001594:	e002      	b.n	800159c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3b01      	subs	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800159c:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015a8:	d102      	bne.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f2      	bne.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015bc:	d110      	bne.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e00f      	b.n	80015e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015c2:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ce:	d007      	beq.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015d0:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015d8:	4a05      	ldr	r2, [pc, #20]	@ (80015f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40007000 	.word	0x40007000
 80015f4:	20000020 	.word	0x20000020
 80015f8:	431bde83 	.word	0x431bde83

080015fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f000 bc08 	b.w	8001e20 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001610:	4b96      	ldr	r3, [pc, #600]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800161a:	4b94      	ldr	r3, [pc, #592]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80e4 	beq.w	80017fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d007      	beq.n	8001648 <HAL_RCC_OscConfig+0x4c>
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2b0c      	cmp	r3, #12
 800163c:	f040 808b 	bne.w	8001756 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2b01      	cmp	r3, #1
 8001644:	f040 8087 	bne.w	8001756 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001648:	4b88      	ldr	r3, [pc, #544]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_RCC_OscConfig+0x64>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e3df      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1a      	ldr	r2, [r3, #32]
 8001664:	4b81      	ldr	r3, [pc, #516]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d004      	beq.n	800167a <HAL_RCC_OscConfig+0x7e>
 8001670:	4b7e      	ldr	r3, [pc, #504]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001678:	e005      	b.n	8001686 <HAL_RCC_OscConfig+0x8a>
 800167a:	4b7c      	ldr	r3, [pc, #496]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 800167c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001686:	4293      	cmp	r3, r2
 8001688:	d223      	bcs.n	80016d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fd5a 	bl	8002148 <RCC_SetFlashLatencyFromMSIRange>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e3c0      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800169e:	4b73      	ldr	r3, [pc, #460]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a72      	ldr	r2, [pc, #456]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b70      	ldr	r3, [pc, #448]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	496d      	ldr	r1, [pc, #436]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016bc:	4b6b      	ldr	r3, [pc, #428]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	4968      	ldr	r1, [pc, #416]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	e025      	b.n	800171e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d2:	4b66      	ldr	r3, [pc, #408]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a65      	ldr	r2, [pc, #404]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80016d8:	f043 0308 	orr.w	r3, r3, #8
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b63      	ldr	r3, [pc, #396]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4960      	ldr	r1, [pc, #384]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f0:	4b5e      	ldr	r3, [pc, #376]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	495b      	ldr	r1, [pc, #364]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4618      	mov	r0, r3
 8001710:	f000 fd1a 	bl	8002148 <RCC_SetFlashLatencyFromMSIRange>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e380      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800171e:	f000 fc87 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8001722:	4602      	mov	r2, r0
 8001724:	4b51      	ldr	r3, [pc, #324]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	4950      	ldr	r1, [pc, #320]	@ (8001870 <HAL_RCC_OscConfig+0x274>)
 8001730:	5ccb      	ldrb	r3, [r1, r3]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	fa22 f303 	lsr.w	r3, r2, r3
 800173a:	4a4e      	ldr	r2, [pc, #312]	@ (8001874 <HAL_RCC_OscConfig+0x278>)
 800173c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800173e:	4b4e      	ldr	r3, [pc, #312]	@ (8001878 <HAL_RCC_OscConfig+0x27c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff66 	bl	8000614 <HAL_InitTick>
 8001748:	4603      	mov	r3, r0
 800174a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d052      	beq.n	80017f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	e364      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d032      	beq.n	80017c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800175e:	4b43      	ldr	r3, [pc, #268]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a42      	ldr	r2, [pc, #264]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800176a:	f7fe ffa3 	bl	80006b4 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001772:	f7fe ff9f 	bl	80006b4 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e34d      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001784:	4b39      	ldr	r3, [pc, #228]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001790:	4b36      	ldr	r3, [pc, #216]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a35      	ldr	r2, [pc, #212]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001796:	f043 0308 	orr.w	r3, r3, #8
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	4b33      	ldr	r3, [pc, #204]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4930      	ldr	r1, [pc, #192]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ae:	4b2f      	ldr	r3, [pc, #188]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	492b      	ldr	r1, [pc, #172]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]
 80017c2:	e01a      	b.n	80017fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017c4:	4b29      	ldr	r3, [pc, #164]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a28      	ldr	r2, [pc, #160]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017d0:	f7fe ff70 	bl	80006b4 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017d8:	f7fe ff6c 	bl	80006b4 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e31a      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ea:	4b20      	ldr	r3, [pc, #128]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x1dc>
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d073      	beq.n	80018ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	2b08      	cmp	r3, #8
 800180a:	d005      	beq.n	8001818 <HAL_RCC_OscConfig+0x21c>
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2b0c      	cmp	r3, #12
 8001810:	d10e      	bne.n	8001830 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d10b      	bne.n	8001830 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	4b14      	ldr	r3, [pc, #80]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d063      	beq.n	80018ec <HAL_RCC_OscConfig+0x2f0>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d15f      	bne.n	80018ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e2f7      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001838:	d106      	bne.n	8001848 <HAL_RCC_OscConfig+0x24c>
 800183a:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a0b      	ldr	r2, [pc, #44]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e025      	b.n	8001894 <HAL_RCC_OscConfig+0x298>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001850:	d114      	bne.n	800187c <HAL_RCC_OscConfig+0x280>
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b03      	ldr	r3, [pc, #12]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a02      	ldr	r2, [pc, #8]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e013      	b.n	8001894 <HAL_RCC_OscConfig+0x298>
 800186c:	40021000 	.word	0x40021000
 8001870:	08002c0c 	.word	0x08002c0c
 8001874:	20000020 	.word	0x20000020
 8001878:	20000024 	.word	0x20000024
 800187c:	4ba0      	ldr	r3, [pc, #640]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a9f      	ldr	r2, [pc, #636]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b9d      	ldr	r3, [pc, #628]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a9c      	ldr	r2, [pc, #624]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 800188e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7fe ff0a 	bl	80006b4 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7fe ff06 	bl	80006b4 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	@ 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e2b4      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b6:	4b92      	ldr	r3, [pc, #584]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x2a8>
 80018c2:	e014      	b.n	80018ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7fe fef6 	bl	80006b4 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018cc:	f7fe fef2 	bl	80006b4 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	@ 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e2a0      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018de:	4b88      	ldr	r3, [pc, #544]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x2d0>
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d060      	beq.n	80019bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d005      	beq.n	800190c <HAL_RCC_OscConfig+0x310>
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d119      	bne.n	800193a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d116      	bne.n	800193a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800190c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_OscConfig+0x328>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e27d      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b76      	ldr	r3, [pc, #472]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	061b      	lsls	r3, r3, #24
 8001932:	4973      	ldr	r1, [pc, #460]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001938:	e040      	b.n	80019bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d023      	beq.n	800198a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001942:	4b6f      	ldr	r3, [pc, #444]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6e      	ldr	r2, [pc, #440]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7fe feb1 	bl	80006b4 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001956:	f7fe fead 	bl	80006b4 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e25b      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001968:	4b65      	ldr	r3, [pc, #404]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001974:	4b62      	ldr	r3, [pc, #392]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	495f      	ldr	r1, [pc, #380]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
 8001988:	e018      	b.n	80019bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a5c      	ldr	r2, [pc, #368]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7fe fe8d 	bl	80006b4 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199e:	f7fe fe89 	bl	80006b4 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e237      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b0:	4b53      	ldr	r3, [pc, #332]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d03c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 80019d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e0:	f7fe fe68 	bl	80006b4 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e8:	f7fe fe64 	bl	80006b4 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e212      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019fa:	4b41      	ldr	r3, [pc, #260]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 80019fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0ef      	beq.n	80019e8 <HAL_RCC_OscConfig+0x3ec>
 8001a08:	e01b      	b.n	8001a42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a10:	4a3b      	ldr	r2, [pc, #236]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1a:	f7fe fe4b 	bl	80006b4 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a22:	f7fe fe47 	bl	80006b4 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e1f5      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a34:	4b32      	ldr	r3, [pc, #200]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1ef      	bne.n	8001a22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 80a6 	beq.w	8001b9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a54:	4b2a      	ldr	r3, [pc, #168]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10d      	bne.n	8001a7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	4b27      	ldr	r3, [pc, #156]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a64:	4a26      	ldr	r2, [pc, #152]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a6c:	4b24      	ldr	r3, [pc, #144]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7c:	4b21      	ldr	r3, [pc, #132]	@ (8001b04 <HAL_RCC_OscConfig+0x508>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d118      	bne.n	8001aba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a88:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <HAL_RCC_OscConfig+0x508>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b04 <HAL_RCC_OscConfig+0x508>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a94:	f7fe fe0e 	bl	80006b4 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9c:	f7fe fe0a 	bl	80006b4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e1b8      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <HAL_RCC_OscConfig+0x508>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d108      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x4d8>
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ad2:	e029      	b.n	8001b28 <HAL_RCC_OscConfig+0x52c>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d115      	bne.n	8001b08 <HAL_RCC_OscConfig+0x50c>
 8001adc:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ae2:	4a07      	ldr	r2, [pc, #28]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af2:	4a03      	ldr	r2, [pc, #12]	@ (8001b00 <HAL_RCC_OscConfig+0x504>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001afc:	e014      	b.n	8001b28 <HAL_RCC_OscConfig+0x52c>
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40007000 	.word	0x40007000
 8001b08:	4b9d      	ldr	r3, [pc, #628]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b0e:	4a9c      	ldr	r2, [pc, #624]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b18:	4b99      	ldr	r3, [pc, #612]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b1e:	4a98      	ldr	r2, [pc, #608]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001b20:	f023 0304 	bic.w	r3, r3, #4
 8001b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d016      	beq.n	8001b5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7fe fdc0 	bl	80006b4 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7fe fdbc 	bl	80006b4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e168      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b4e:	4b8c      	ldr	r3, [pc, #560]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ed      	beq.n	8001b38 <HAL_RCC_OscConfig+0x53c>
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5e:	f7fe fda9 	bl	80006b4 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7fe fda5 	bl	80006b4 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e151      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b7c:	4b80      	ldr	r3, [pc, #512]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1ed      	bne.n	8001b66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b8a:	7ffb      	ldrb	r3, [r7, #31]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b90:	4b7b      	ldr	r3, [pc, #492]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b94:	4a7a      	ldr	r2, [pc, #488]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b9a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0320 	and.w	r3, r3, #32
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d03c      	beq.n	8001c22 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01c      	beq.n	8001bea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bb0:	4b73      	ldr	r3, [pc, #460]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bb6:	4a72      	ldr	r2, [pc, #456]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc0:	f7fe fd78 	bl	80006b4 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bc8:	f7fe fd74 	bl	80006b4 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e122      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bda:	4b69      	ldr	r3, [pc, #420]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0ef      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x5cc>
 8001be8:	e01b      	b.n	8001c22 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bea:	4b65      	ldr	r3, [pc, #404]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001bec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bf0:	4a63      	ldr	r2, [pc, #396]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfa:	f7fe fd5b 	bl	80006b4 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c02:	f7fe fd57 	bl	80006b4 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e105      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c14:	4b5a      	ldr	r3, [pc, #360]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001c16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1ef      	bne.n	8001c02 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 80f9 	beq.w	8001e1e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	f040 80cf 	bne.w	8001dd4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c36:	4b52      	ldr	r3, [pc, #328]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 0203 	and.w	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d12c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c54:	3b01      	subs	r3, #1
 8001c56:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d123      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c66:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d11b      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c76:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d113      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c86:	085b      	lsrs	r3, r3, #1
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d109      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	085b      	lsrs	r3, r3, #1
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d071      	beq.n	8001d88 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d068      	beq.n	8001d7c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001caa:	4b35      	ldr	r3, [pc, #212]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d105      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cb6:	4b32      	ldr	r3, [pc, #200]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0ac      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2d      	ldr	r2, [pc, #180]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001ccc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cd0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cd2:	f7fe fcef 	bl	80006b4 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7fe fceb 	bl	80006b4 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e099      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cec:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f0      	bne.n	8001cda <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf8:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <HAL_RCC_OscConfig+0x788>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d08:	3a01      	subs	r2, #1
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	4311      	orrs	r1, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d12:	0212      	lsls	r2, r2, #8
 8001d14:	4311      	orrs	r1, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d1a:	0852      	lsrs	r2, r2, #1
 8001d1c:	3a01      	subs	r2, #1
 8001d1e:	0552      	lsls	r2, r2, #21
 8001d20:	4311      	orrs	r1, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d26:	0852      	lsrs	r2, r2, #1
 8001d28:	3a01      	subs	r2, #1
 8001d2a:	0652      	lsls	r2, r2, #25
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d32:	06d2      	lsls	r2, r2, #27
 8001d34:	430a      	orrs	r2, r1
 8001d36:	4912      	ldr	r1, [pc, #72]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0f      	ldr	r2, [pc, #60]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d48:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d54:	f7fe fcae 	bl	80006b4 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7fe fcaa 	bl	80006b4 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e058      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6e:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <HAL_RCC_OscConfig+0x784>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d7a:	e050      	b.n	8001e1e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e04f      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
 8001d80:	40021000 	.word	0x40021000
 8001d84:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <HAL_RCC_OscConfig+0x82c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d144      	bne.n	8001e1e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d94:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <HAL_RCC_OscConfig+0x82c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a23      	ldr	r2, [pc, #140]	@ (8001e28 <HAL_RCC_OscConfig+0x82c>)
 8001d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da0:	4b21      	ldr	r3, [pc, #132]	@ (8001e28 <HAL_RCC_OscConfig+0x82c>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4a20      	ldr	r2, [pc, #128]	@ (8001e28 <HAL_RCC_OscConfig+0x82c>)
 8001da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001daa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dac:	f7fe fc82 	bl	80006b4 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7fe fc7e 	bl	80006b4 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e02c      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc6:	4b18      	ldr	r3, [pc, #96]	@ (8001e28 <HAL_RCC_OscConfig+0x82c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x7b8>
 8001dd2:	e024      	b.n	8001e1e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d01f      	beq.n	8001e1a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dda:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <HAL_RCC_OscConfig+0x82c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a12      	ldr	r2, [pc, #72]	@ (8001e28 <HAL_RCC_OscConfig+0x82c>)
 8001de0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de6:	f7fe fc65 	bl	80006b4 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dee:	f7fe fc61 	bl	80006b4 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e00f      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e00:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <HAL_RCC_OscConfig+0x82c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f0      	bne.n	8001dee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e0c:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <HAL_RCC_OscConfig+0x82c>)
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	4905      	ldr	r1, [pc, #20]	@ (8001e28 <HAL_RCC_OscConfig+0x82c>)
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_RCC_OscConfig+0x830>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	60cb      	str	r3, [r1, #12]
 8001e18:	e001      	b.n	8001e1e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	feeefffc 	.word	0xfeeefffc

08001e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0e7      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b75      	ldr	r3, [pc, #468]	@ (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d910      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b72      	ldr	r3, [pc, #456]	@ (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0207 	bic.w	r2, r3, #7
 8001e5a:	4970      	ldr	r1, [pc, #448]	@ (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b6e      	ldr	r3, [pc, #440]	@ (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0cf      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d010      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	4b66      	ldr	r3, [pc, #408]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d908      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e90:	4b63      	ldr	r3, [pc, #396]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4960      	ldr	r1, [pc, #384]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d04c      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb6:	4b5a      	ldr	r3, [pc, #360]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d121      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0a6      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ece:	4b54      	ldr	r3, [pc, #336]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d115      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e09a      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d107      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d109      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e08e      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e086      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f06:	4b46      	ldr	r3, [pc, #280]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f023 0203 	bic.w	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4943      	ldr	r1, [pc, #268]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f18:	f7fe fbcc 	bl	80006b4 <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f20:	f7fe fbc8 	bl	80006b4 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e06e      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	4b3a      	ldr	r3, [pc, #232]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 020c 	and.w	r2, r3, #12
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d1eb      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d010      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	4b31      	ldr	r3, [pc, #196]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d208      	bcs.n	8001f76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b2e      	ldr	r3, [pc, #184]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	492b      	ldr	r1, [pc, #172]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f76:	4b29      	ldr	r3, [pc, #164]	@ (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d210      	bcs.n	8001fa6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f84:	4b25      	ldr	r3, [pc, #148]	@ (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 0207 	bic.w	r2, r3, #7
 8001f8c:	4923      	ldr	r1, [pc, #140]	@ (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f94:	4b21      	ldr	r3, [pc, #132]	@ (800201c <HAL_RCC_ClockConfig+0x1ec>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e036      	b.n	8002014 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d008      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	4918      	ldr	r1, [pc, #96]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d009      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fd0:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4910      	ldr	r1, [pc, #64]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fe4:	f000 f824 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	490b      	ldr	r1, [pc, #44]	@ (8002024 <HAL_RCC_ClockConfig+0x1f4>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8002000:	4a09      	ldr	r2, [pc, #36]	@ (8002028 <HAL_RCC_ClockConfig+0x1f8>)
 8002002:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002004:	4b09      	ldr	r3, [pc, #36]	@ (800202c <HAL_RCC_ClockConfig+0x1fc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fb03 	bl	8000614 <HAL_InitTick>
 800200e:	4603      	mov	r3, r0
 8002010:	72fb      	strb	r3, [r7, #11]

  return status;
 8002012:	7afb      	ldrb	r3, [r7, #11]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40022000 	.word	0x40022000
 8002020:	40021000 	.word	0x40021000
 8002024:	08002c0c 	.word	0x08002c0c
 8002028:	20000020 	.word	0x20000020
 800202c:	20000024 	.word	0x20000024

08002030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	@ 0x24
 8002034:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203e:	4b3e      	ldr	r3, [pc, #248]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002048:	4b3b      	ldr	r3, [pc, #236]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_GetSysClockFreq+0x34>
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b0c      	cmp	r3, #12
 800205c:	d121      	bne.n	80020a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d11e      	bne.n	80020a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002064:	4b34      	ldr	r3, [pc, #208]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d107      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002070:	4b31      	ldr	r3, [pc, #196]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 8002072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	e005      	b.n	800208c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002080:	4b2d      	ldr	r3, [pc, #180]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800208c:	4a2b      	ldr	r2, [pc, #172]	@ (800213c <HAL_RCC_GetSysClockFreq+0x10c>)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002094:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10d      	bne.n	80020b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d102      	bne.n	80020ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020a8:	4b25      	ldr	r3, [pc, #148]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x110>)
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	e004      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020b4:	4b23      	ldr	r3, [pc, #140]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x114>)
 80020b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	2b0c      	cmp	r3, #12
 80020bc:	d134      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020be:	4b1e      	ldr	r3, [pc, #120]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d003      	beq.n	80020d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d003      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0xac>
 80020d4:	e005      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x110>)
 80020d8:	617b      	str	r3, [r7, #20]
      break;
 80020da:	e005      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020dc:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x114>)
 80020de:	617b      	str	r3, [r7, #20]
      break;
 80020e0:	e002      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	617b      	str	r3, [r7, #20]
      break;
 80020e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020e8:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	3301      	adds	r3, #1
 80020f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020f6:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	fb03 f202 	mul.w	r2, r3, r2
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	fbb2 f3f3 	udiv	r3, r2, r3
 800210c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800210e:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x108>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	0e5b      	lsrs	r3, r3, #25
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	3301      	adds	r3, #1
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	fbb2 f3f3 	udiv	r3, r2, r3
 8002126:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002128:	69bb      	ldr	r3, [r7, #24]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	@ 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	08002c1c 	.word	0x08002c1c
 8002140:	00f42400 	.word	0x00f42400
 8002144:	007a1200 	.word	0x007a1200

08002148 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002154:	4b2a      	ldr	r3, [pc, #168]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002160:	f7ff f9e8 	bl	8001534 <HAL_PWREx_GetVoltageRange>
 8002164:	6178      	str	r0, [r7, #20]
 8002166:	e014      	b.n	8002192 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216c:	4a24      	ldr	r2, [pc, #144]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002172:	6593      	str	r3, [r2, #88]	@ 0x58
 8002174:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002180:	f7ff f9d8 	bl	8001534 <HAL_PWREx_GetVoltageRange>
 8002184:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002186:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	4a1d      	ldr	r2, [pc, #116]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002190:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002198:	d10b      	bne.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b80      	cmp	r3, #128	@ 0x80
 800219e:	d919      	bls.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80021a4:	d902      	bls.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021a6:	2302      	movs	r3, #2
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	e013      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021ac:	2301      	movs	r3, #1
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	e010      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b80      	cmp	r3, #128	@ 0x80
 80021b6:	d902      	bls.n	80021be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021b8:	2303      	movs	r3, #3
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	e00a      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b80      	cmp	r3, #128	@ 0x80
 80021c2:	d102      	bne.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021c4:	2302      	movs	r3, #2
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	e004      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b70      	cmp	r3, #112	@ 0x70
 80021ce:	d101      	bne.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021d0:	2301      	movs	r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 0207 	bic.w	r2, r3, #7
 80021dc:	4909      	ldr	r1, [pc, #36]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021e4:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d001      	beq.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	40022000 	.word	0x40022000

08002208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002210:	2300      	movs	r3, #0
 8002212:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002214:	2300      	movs	r3, #0
 8002216:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002220:	2b00      	cmp	r3, #0
 8002222:	d041      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002228:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800222c:	d02a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800222e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002232:	d824      	bhi.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002234:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002238:	d008      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800223a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800223e:	d81e      	bhi.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002244:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002248:	d010      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800224a:	e018      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800224c:	4b86      	ldr	r3, [pc, #536]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a85      	ldr	r2, [pc, #532]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002256:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002258:	e015      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3304      	adds	r3, #4
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f000 facd 	bl	8002800 <RCCEx_PLLSAI1_Config>
 8002266:	4603      	mov	r3, r0
 8002268:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800226a:	e00c      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3320      	adds	r3, #32
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fbb6 	bl	80029e4 <RCCEx_PLLSAI2_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800227c:	e003      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	74fb      	strb	r3, [r7, #19]
      break;
 8002282:	e000      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10b      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800228c:	4b76      	ldr	r3, [pc, #472]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002292:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800229a:	4973      	ldr	r1, [pc, #460]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022a2:	e001      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d041      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80022bc:	d02a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80022c2:	d824      	bhi.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022c8:	d008      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022ce:	d81e      	bhi.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022d8:	d010      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022da:	e018      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022dc:	4b62      	ldr	r3, [pc, #392]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a61      	ldr	r2, [pc, #388]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022e8:	e015      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fa85 	bl	8002800 <RCCEx_PLLSAI1_Config>
 80022f6:	4603      	mov	r3, r0
 80022f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022fa:	e00c      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3320      	adds	r3, #32
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fb6e 	bl	80029e4 <RCCEx_PLLSAI2_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800230c:	e003      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	74fb      	strb	r3, [r7, #19]
      break;
 8002312:	e000      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10b      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800231c:	4b52      	ldr	r3, [pc, #328]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800232a:	494f      	ldr	r1, [pc, #316]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002332:	e001      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80a0 	beq.w	8002486 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800234a:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800235a:	2300      	movs	r3, #0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00d      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002360:	4b41      	ldr	r3, [pc, #260]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002364:	4a40      	ldr	r2, [pc, #256]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800236a:	6593      	str	r3, [r2, #88]	@ 0x58
 800236c:	4b3e      	ldr	r3, [pc, #248]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002378:	2301      	movs	r3, #1
 800237a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800237c:	4b3b      	ldr	r3, [pc, #236]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a3a      	ldr	r2, [pc, #232]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002386:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002388:	f7fe f994 	bl	80006b4 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800238e:	e009      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002390:	f7fe f990 	bl	80006b4 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d902      	bls.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	74fb      	strb	r3, [r7, #19]
        break;
 80023a2:	e005      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023a4:	4b31      	ldr	r3, [pc, #196]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ef      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d15c      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01f      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d019      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023d4:	4b24      	ldr	r3, [pc, #144]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023e0:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e6:	4a20      	ldr	r2, [pc, #128]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002400:	4a19      	ldr	r2, [pc, #100]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe f94f 	bl	80006b4 <HAL_GetTick>
 8002416:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002418:	e00b      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7fe f94b 	bl	80006b4 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d902      	bls.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	74fb      	strb	r3, [r7, #19]
            break;
 8002430:	e006      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002432:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ec      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002446:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002456:	4904      	ldr	r1, [pc, #16]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800245e:	e009      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	74bb      	strb	r3, [r7, #18]
 8002464:	e006      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002474:	7c7b      	ldrb	r3, [r7, #17]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247a:	4ba6      	ldr	r3, [pc, #664]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800247c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247e:	4aa5      	ldr	r2, [pc, #660]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002480:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002484:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002492:	4ba0      	ldr	r3, [pc, #640]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002498:	f023 0203 	bic.w	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a0:	499c      	ldr	r1, [pc, #624]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024b4:	4b97      	ldr	r3, [pc, #604]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ba:	f023 020c 	bic.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c2:	4994      	ldr	r1, [pc, #592]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024d6:	4b8f      	ldr	r3, [pc, #572]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	498b      	ldr	r1, [pc, #556]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024f8:	4b86      	ldr	r3, [pc, #536]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002506:	4983      	ldr	r1, [pc, #524]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800251a:	4b7e      	ldr	r3, [pc, #504]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002520:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002528:	497a      	ldr	r1, [pc, #488]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800253c:	4b75      	ldr	r3, [pc, #468]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002542:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254a:	4972      	ldr	r1, [pc, #456]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800255e:	4b6d      	ldr	r3, [pc, #436]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002564:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256c:	4969      	ldr	r1, [pc, #420]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002580:	4b64      	ldr	r3, [pc, #400]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002586:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800258e:	4961      	ldr	r1, [pc, #388]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b0:	4958      	ldr	r1, [pc, #352]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025c4:	4b53      	ldr	r3, [pc, #332]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d2:	4950      	ldr	r1, [pc, #320]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f4:	4947      	ldr	r1, [pc, #284]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002608:	4b42      	ldr	r3, [pc, #264]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800260a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002616:	493f      	ldr	r1, [pc, #252]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d028      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800262a:	4b3a      	ldr	r3, [pc, #232]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002630:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002638:	4936      	ldr	r1, [pc, #216]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002648:	d106      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800264a:	4b32      	ldr	r3, [pc, #200]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4a31      	ldr	r2, [pc, #196]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002650:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002654:	60d3      	str	r3, [r2, #12]
 8002656:	e011      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002660:	d10c      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3304      	adds	r3, #4
 8002666:	2101      	movs	r1, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f8c9 	bl	8002800 <RCCEx_PLLSAI1_Config>
 800266e:	4603      	mov	r3, r0
 8002670:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002672:	7cfb      	ldrb	r3, [r7, #19]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d028      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002688:	4b22      	ldr	r3, [pc, #136]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002696:	491f      	ldr	r1, [pc, #124]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026a6:	d106      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a19      	ldr	r2, [pc, #100]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026b2:	60d3      	str	r3, [r2, #12]
 80026b4:	e011      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026be:	d10c      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3304      	adds	r3, #4
 80026c4:	2101      	movs	r1, #1
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f89a 	bl	8002800 <RCCEx_PLLSAI1_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80026d6:	7cfb      	ldrb	r3, [r7, #19]
 80026d8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d02a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026f4:	4907      	ldr	r1, [pc, #28]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002700:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002704:	d108      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002706:	4b03      	ldr	r3, [pc, #12]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	4a02      	ldr	r2, [pc, #8]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800270c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002710:	60d3      	str	r3, [r2, #12]
 8002712:	e013      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002714:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800271c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002720:	d10c      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3304      	adds	r3, #4
 8002726:	2101      	movs	r1, #1
 8002728:	4618      	mov	r0, r3
 800272a:	f000 f869 	bl	8002800 <RCCEx_PLLSAI1_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d02f      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002748:	4b2c      	ldr	r3, [pc, #176]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002756:	4929      	ldr	r1, [pc, #164]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002762:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002766:	d10d      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	2102      	movs	r1, #2
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f846 	bl	8002800 <RCCEx_PLLSAI1_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d014      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	74bb      	strb	r3, [r7, #18]
 8002782:	e011      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800278c:	d10c      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3320      	adds	r3, #32
 8002792:	2102      	movs	r1, #2
 8002794:	4618      	mov	r0, r3
 8002796:	f000 f925 	bl	80029e4 <RCCEx_PLLSAI2_Config>
 800279a:	4603      	mov	r3, r0
 800279c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027b4:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027c4:	490d      	ldr	r1, [pc, #52]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027d8:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027e8:	4904      	ldr	r1, [pc, #16]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000

08002800 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800280e:	4b74      	ldr	r3, [pc, #464]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d018      	beq.n	800284c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800281a:	4b71      	ldr	r3, [pc, #452]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f003 0203 	and.w	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d10d      	bne.n	8002846 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
       ||
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002832:	4b6b      	ldr	r3, [pc, #428]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
       ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d047      	beq.n	80028d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	e044      	b.n	80028d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b03      	cmp	r3, #3
 8002852:	d018      	beq.n	8002886 <RCCEx_PLLSAI1_Config+0x86>
 8002854:	2b03      	cmp	r3, #3
 8002856:	d825      	bhi.n	80028a4 <RCCEx_PLLSAI1_Config+0xa4>
 8002858:	2b01      	cmp	r3, #1
 800285a:	d002      	beq.n	8002862 <RCCEx_PLLSAI1_Config+0x62>
 800285c:	2b02      	cmp	r3, #2
 800285e:	d009      	beq.n	8002874 <RCCEx_PLLSAI1_Config+0x74>
 8002860:	e020      	b.n	80028a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002862:	4b5f      	ldr	r3, [pc, #380]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d11d      	bne.n	80028aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002872:	e01a      	b.n	80028aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002874:	4b5a      	ldr	r3, [pc, #360]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800287c:	2b00      	cmp	r3, #0
 800287e:	d116      	bne.n	80028ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002884:	e013      	b.n	80028ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002886:	4b56      	ldr	r3, [pc, #344]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002892:	4b53      	ldr	r3, [pc, #332]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028a2:	e006      	b.n	80028b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
      break;
 80028a8:	e004      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028aa:	bf00      	nop
 80028ac:	e002      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ae:	bf00      	nop
 80028b0:	e000      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10d      	bne.n	80028d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028ba:	4b49      	ldr	r3, [pc, #292]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6819      	ldr	r1, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	430b      	orrs	r3, r1
 80028d0:	4943      	ldr	r1, [pc, #268]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d17c      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028dc:	4b40      	ldr	r3, [pc, #256]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a3f      	ldr	r2, [pc, #252]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80028e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e8:	f7fd fee4 	bl	80006b4 <HAL_GetTick>
 80028ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028ee:	e009      	b.n	8002904 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028f0:	f7fd fee0 	bl	80006b4 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d902      	bls.n	8002904 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	73fb      	strb	r3, [r7, #15]
        break;
 8002902:	e005      	b.n	8002910 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002904:	4b36      	ldr	r3, [pc, #216]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1ef      	bne.n	80028f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d15f      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d110      	bne.n	800293e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800291c:	4b30      	ldr	r3, [pc, #192]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002924:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6892      	ldr	r2, [r2, #8]
 800292c:	0211      	lsls	r1, r2, #8
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	06d2      	lsls	r2, r2, #27
 8002934:	430a      	orrs	r2, r1
 8002936:	492a      	ldr	r1, [pc, #168]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002938:	4313      	orrs	r3, r2
 800293a:	610b      	str	r3, [r1, #16]
 800293c:	e027      	b.n	800298e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d112      	bne.n	800296a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002944:	4b26      	ldr	r3, [pc, #152]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800294c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6892      	ldr	r2, [r2, #8]
 8002954:	0211      	lsls	r1, r2, #8
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6912      	ldr	r2, [r2, #16]
 800295a:	0852      	lsrs	r2, r2, #1
 800295c:	3a01      	subs	r2, #1
 800295e:	0552      	lsls	r2, r2, #21
 8002960:	430a      	orrs	r2, r1
 8002962:	491f      	ldr	r1, [pc, #124]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	610b      	str	r3, [r1, #16]
 8002968:	e011      	b.n	800298e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800296a:	4b1d      	ldr	r3, [pc, #116]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002972:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6892      	ldr	r2, [r2, #8]
 800297a:	0211      	lsls	r1, r2, #8
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6952      	ldr	r2, [r2, #20]
 8002980:	0852      	lsrs	r2, r2, #1
 8002982:	3a01      	subs	r2, #1
 8002984:	0652      	lsls	r2, r2, #25
 8002986:	430a      	orrs	r2, r1
 8002988:	4915      	ldr	r1, [pc, #84]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800298a:	4313      	orrs	r3, r2
 800298c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800298e:	4b14      	ldr	r3, [pc, #80]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a13      	ldr	r2, [pc, #76]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002994:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002998:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7fd fe8b 	bl	80006b4 <HAL_GetTick>
 800299e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029a0:	e009      	b.n	80029b6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029a2:	f7fd fe87 	bl	80006b4 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d902      	bls.n	80029b6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	73fb      	strb	r3, [r7, #15]
          break;
 80029b4:	e005      	b.n	80029c2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029b6:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0ef      	beq.n	80029a2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d106      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029c8:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	4903      	ldr	r1, [pc, #12]	@ (80029e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000

080029e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029f2:	4b69      	ldr	r3, [pc, #420]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d018      	beq.n	8002a30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029fe:	4b66      	ldr	r3, [pc, #408]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0203 	and.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d10d      	bne.n	8002a2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
       ||
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a16:	4b60      	ldr	r3, [pc, #384]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
       ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d047      	beq.n	8002aba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	e044      	b.n	8002aba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d018      	beq.n	8002a6a <RCCEx_PLLSAI2_Config+0x86>
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d825      	bhi.n	8002a88 <RCCEx_PLLSAI2_Config+0xa4>
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d002      	beq.n	8002a46 <RCCEx_PLLSAI2_Config+0x62>
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d009      	beq.n	8002a58 <RCCEx_PLLSAI2_Config+0x74>
 8002a44:	e020      	b.n	8002a88 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a46:	4b54      	ldr	r3, [pc, #336]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d11d      	bne.n	8002a8e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a56:	e01a      	b.n	8002a8e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a58:	4b4f      	ldr	r3, [pc, #316]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d116      	bne.n	8002a92 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a68:	e013      	b.n	8002a92 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10f      	bne.n	8002a96 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a76:	4b48      	ldr	r3, [pc, #288]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a86:	e006      	b.n	8002a96 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a8c:	e004      	b.n	8002a98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a8e:	bf00      	nop
 8002a90:	e002      	b.n	8002a98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a92:	bf00      	nop
 8002a94:	e000      	b.n	8002a98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a96:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10d      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6819      	ldr	r1, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	4938      	ldr	r1, [pc, #224]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d166      	bne.n	8002b8e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ac0:	4b35      	ldr	r3, [pc, #212]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a34      	ldr	r2, [pc, #208]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002acc:	f7fd fdf2 	bl	80006b4 <HAL_GetTick>
 8002ad0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ad2:	e009      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ad4:	f7fd fdee 	bl	80006b4 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d902      	bls.n	8002ae8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ae6:	e005      	b.n	8002af4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1ef      	bne.n	8002ad4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d149      	bne.n	8002b8e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d110      	bne.n	8002b22 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b00:	4b25      	ldr	r3, [pc, #148]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002b08:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6892      	ldr	r2, [r2, #8]
 8002b10:	0211      	lsls	r1, r2, #8
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68d2      	ldr	r2, [r2, #12]
 8002b16:	06d2      	lsls	r2, r2, #27
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	491f      	ldr	r1, [pc, #124]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	614b      	str	r3, [r1, #20]
 8002b20:	e011      	b.n	8002b46 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b22:	4b1d      	ldr	r3, [pc, #116]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b2a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6892      	ldr	r2, [r2, #8]
 8002b32:	0211      	lsls	r1, r2, #8
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6912      	ldr	r2, [r2, #16]
 8002b38:	0852      	lsrs	r2, r2, #1
 8002b3a:	3a01      	subs	r2, #1
 8002b3c:	0652      	lsls	r2, r2, #25
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	4915      	ldr	r1, [pc, #84]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b46:	4b14      	ldr	r3, [pc, #80]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a13      	ldr	r2, [pc, #76]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7fd fdaf 	bl	80006b4 <HAL_GetTick>
 8002b56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b58:	e009      	b.n	8002b6e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b5a:	f7fd fdab 	bl	80006b4 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d902      	bls.n	8002b6e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	73fb      	strb	r3, [r7, #15]
          break;
 8002b6c:	e005      	b.n	8002b7a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0ef      	beq.n	8002b5a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d106      	bne.n	8002b8e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b80:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	4903      	ldr	r1, [pc, #12]	@ (8002b98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000

08002b9c <memset>:
 8002b9c:	4402      	add	r2, r0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d100      	bne.n	8002ba6 <memset+0xa>
 8002ba4:	4770      	bx	lr
 8002ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8002baa:	e7f9      	b.n	8002ba0 <memset+0x4>

08002bac <__libc_init_array>:
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	4d0d      	ldr	r5, [pc, #52]	@ (8002be4 <__libc_init_array+0x38>)
 8002bb0:	4c0d      	ldr	r4, [pc, #52]	@ (8002be8 <__libc_init_array+0x3c>)
 8002bb2:	1b64      	subs	r4, r4, r5
 8002bb4:	10a4      	asrs	r4, r4, #2
 8002bb6:	2600      	movs	r6, #0
 8002bb8:	42a6      	cmp	r6, r4
 8002bba:	d109      	bne.n	8002bd0 <__libc_init_array+0x24>
 8002bbc:	4d0b      	ldr	r5, [pc, #44]	@ (8002bec <__libc_init_array+0x40>)
 8002bbe:	4c0c      	ldr	r4, [pc, #48]	@ (8002bf0 <__libc_init_array+0x44>)
 8002bc0:	f000 f818 	bl	8002bf4 <_init>
 8002bc4:	1b64      	subs	r4, r4, r5
 8002bc6:	10a4      	asrs	r4, r4, #2
 8002bc8:	2600      	movs	r6, #0
 8002bca:	42a6      	cmp	r6, r4
 8002bcc:	d105      	bne.n	8002bda <__libc_init_array+0x2e>
 8002bce:	bd70      	pop	{r4, r5, r6, pc}
 8002bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd4:	4798      	blx	r3
 8002bd6:	3601      	adds	r6, #1
 8002bd8:	e7ee      	b.n	8002bb8 <__libc_init_array+0xc>
 8002bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bde:	4798      	blx	r3
 8002be0:	3601      	adds	r6, #1
 8002be2:	e7f2      	b.n	8002bca <__libc_init_array+0x1e>
 8002be4:	08002c4c 	.word	0x08002c4c
 8002be8:	08002c4c 	.word	0x08002c4c
 8002bec:	08002c4c 	.word	0x08002c4c
 8002bf0:	08002c50 	.word	0x08002c50

08002bf4 <_init>:
 8002bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf6:	bf00      	nop
 8002bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfa:	bc08      	pop	{r3}
 8002bfc:	469e      	mov	lr, r3
 8002bfe:	4770      	bx	lr

08002c00 <_fini>:
 8002c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c02:	bf00      	nop
 8002c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c06:	bc08      	pop	{r3}
 8002c08:	469e      	mov	lr, r3
 8002c0a:	4770      	bx	lr
